name: Fetch Crypto Candle Data

on:
  schedule:
    - cron: '0 2,8 * * *'
  workflow_dispatch:

jobs:
  fetch-data:
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Check system resources
      run: |
        echo "=== System Resource Check ==="
        df -h
        free -h
        nproc
        ping -c 3 api.bybit.com || echo "Warning: Cannot reach Bybit API directly"

    - name: Check repository size and limits
      run: |
        echo "=== Repository Size Check ==="
        du -sh .
        find . -type f | wc -l
        git count-objects -vH

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install pybit pandas openpyxl requests

    - name: Test API connectivity via proxy
      env:
        PROXY_URL: ${{ secrets.PROXY_URL }}
      run: |
        python -c "
        import os
        import requests
        import sys
        proxy_url = os.getenv('PROXY_URL')
        test_url = f'{proxy_url}/https://api.bybit.com/v5/market/time' if proxy_url else 'https://api.bybit.com/v5/market/time'
        try:
            response = requests.get(test_url, timeout=10)
            if response.status_code == 200 and response.json().get('retCode') == 0:
                print(f'✓ Bybit API connectivity successful. Server time: {response.json().get(\"result\", {}).get(\"timeSecond\", \"Unknown\")}')
            else:
                print(f'✗ API error: {response.status_code}, {response.text[:200]}')
                sys.exit(1)
        except Exception as e:
            print(f'✗ API connectivity error: {str(e)}')
            sys.exit(1)
        "

    - name: Fetch crypto candle data
      env:
        PROXY_URL: ${{ secrets.PROXY_URL }}
      run: python fetch_crypto_data.py

    - name: Check data integrity and list files
      run: |
        echo "=== Data Integrity Check ==="
        yesterday=$(date -d 'yesterday' '+%Y-%m-%d')
        echo "Listing all files in $yesterday:"
        find $yesterday -type f -exec ls -l {} \;
        if [ -d "$yesterday" ]; then
          echo "✓ Date folder created: $yesterday"
          for category in spot perpetual; do
            if [ -d "$yesterday/$category" ]; then
              echo "✓ Category folder exists: $category"
              json_count=$(find "$yesterday/$category" -name "*.json" | wc -l)
              excel_count=$(find "$yesterday/$category" -name "*.xlsx" | wc -l)
              echo " JSON files: $json_count, Excel files: $excel_count"
              if [ "$json_count" -eq 10 ] && [ "$excel_count" -eq 10 ]; then
                echo " ✓ All interval files present for $category"
              else
                echo " ⚠ Expected 10 files each, got JSON: $json_count, Excel: $excel_count"
                exit 1
              fi
            else
              echo "✗ Missing category folder: $category"
              exit 1
            fi
          done
        else
          echo "✗ Date folder not created"
          exit 1
        fi

    - name: Check log file
      run: |
        if [ -f "crypto_data_fetch.log" ]; then
          echo "=== Log File Summary ==="
          du -h crypto_data_fetch.log
          echo "Last 10 log entries:"
          tail -10 crypto_data_fetch.log
          error_count=$(grep -c "ERROR" crypto_data_fetch.log || echo "0")
          if [ "$error_count" -gt 0 ]; then
            echo "⚠ Found $error_count ERROR entries in log"
            grep "ERROR" crypto_data_fetch.log | tail -5
          else
            echo "✓ No errors found in log file"
          fi
        else
          echo "⚠ Log file not found"
        fi

    - name: Configure Git
      run: |
        git config --local user.email "${{ github.actor }}@users.noreply.github.com"
        git config --local user.name "${{ github.actor }}"
        git config --local core.autocrlf false  # Disable line-ending conversion
        git config --local core.ignorecase false  # Ensure case sensitivity

    - name: Commit and push changes
      run: |
        echo "=== Git Status Before Add ==="
        git status
        git add .
        echo "=== Git Status After Add ==="
        git status
        git commit -m "Add crypto candle data for $(date -d 'yesterday' '+%Y-%m-%d')" --allow-empty
        git push
        echo "✓ Pushed changes to repository"

    - name: Upload log file as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: crypto-data-fetch-log-${{ github.run_number }}
        path: crypto_data_fetch.log
        retention-days: 30
